name: Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
          
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Sonarqube Begin
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 6.2.0
          dotnet sonarscanner begin /o:fiap /k:gestao-pedidos-pedido /d:sonar.login=sqa_b632c864822aeae6d1e1c5f000363596eeb65460 /d:sonar.verbose=true /d:sonar.dotnet.excludeTestProjects=true /d:sonar.host.url=http://54.161.116.110:9000
      
      - name: Dotnet Build
        run: |
          dotnet build .
      
      - name: Generate Test Coverage
        run: |
          dotnet test --no-build --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Sonarqube End
        run: |
          dotnet sonarscanner end /d:sonar.login=sqa_b632c864822aeae6d1e1c5f000363596eeb65460
          
#      - name: Upload SonarQube analysis
#        uses: sonarsource/sonarqube-scan-action@master
#        env:
#          SONAR_TOKEN: sqa_b632c864822aeae6d1e1c5f000363596eeb65460
#          SONAR_HOST_URL: http://54.161.116.110:9000 
#          SONAR_PROJECT_KEY: gestao-pedidos-pedido 
#          SONAR_ORGANIZATION_KEY: fiap
#          SONAR_QUALITY_PROFILE: 'default'
#        with:
#          args: >
#            -Dsonar.projectKey=gestao-pedidos-pedido
#            -Dsonar.cs.opencover.reportsPaths=./src/GestaoPedidos.Test/coverage.json
#            -Dsonar.tests=./src/GestaoPedidos.Test
#            -Dsonar.verbose=true
            
        #-Dsonar.coverage.exclusions=true
        #-Dsonar.coverage.exclusions=true
        #-Dsonar.coverage.exclusions=true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 547185396737.dkr.ecr.us-east-2.amazonaws.com

      - name: Create ECR Repository
        run: |
          aws ecr create-repository --repository-name gestao-pedidos

      - name: Build and push Docker image
        run: |
          docker build -t 547185396737.dkr.ecr.us-east-2.amazonaws.com/gestao-pedidos:latest .
          docker push 547185396737.dkr.ecr.us-east-2.amazonaws.com/gestao-pedidos:latest

      - name: Deploy to EKS
        run: |
          terraform init
          terraform apply -auto-approve